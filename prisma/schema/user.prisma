model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  authUserId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addressDiary Address[] 
  cartItemsCount Int? // Remove

  collectedVouchers CollectedVoucher[]

  orders Order[]
  accounts Account[]
  packages Package[]
  cartItems CartItem[]
  orderedProducts OrderedProduct[]

  favouriteItemIds String[] @db.ObjectId
  favouriteItems Product[] @relation(fields: [favouriteItemIds], references: [id])

  cancellationRequests CancellationRequest[]
  returnRequests ReturnRequest[]

  browsingHistory BrowsingHistoryProduct[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete : Cascade)

  @@unique([provider, providerAccountId])
}

type Address {
  id String
  fullName String
  phone String
  address String
  landmark String?
  province String
  city String
  area String
  type AddressType
  isDefaultBillingAddress Boolean
  isDefaultShippingAddress Boolean
}

enum AddressType {
  Home
  Office
}


type BrowsingHistoryProduct {
  id String
  name String
  attributes Json
  categoryTreeData Json[]
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  selectedCombinationId String?

  userId String @db.ObjectId
  cart User @relation(fields: [userId], references: [id]) 

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete : Cascade)

  @@unique([userId, productId])
}