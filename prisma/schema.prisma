// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  phone String?
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  birthDay DateTime?
  role String?
  gender String?
  addressDiary Json[] 
  cartItemsCount Int?

  orders Order[]
  accounts Account[]
  packages Package[]
  cartItems CartItem[]
  questions Question[]
  ratingAndReviews RatingAndReview[]
  paymentOptions PaymentOption[] @relation("userPaymentOptions")

  returnRequests ReturnRequest[]
  searchIds String[] @db.ObjectId
  favouriteItemIds String[] @db.ObjectId
  cancellationRequests CancellationRequest[]
  searches Search[] @relation(fields: [searchIds], references: [id])
  favouriteItems Product[] @relation(fields: [favouriteItemIds], references: [id])

  behaviour UserBehaviour?
}

model UserBehaviour {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId @unique
  user User @relation(fields: [userId], references: [id])

  count Int @default(0)
  
  browsingHistory Json[]
  browsingHistoryProductIds String[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete : Cascade)

  @@unique([provider, providerAccountId])
}

model Search {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  query String
  createdAt DateTime @default(now())

  userIds String[] @db.ObjectId
  user User[] @relation(fields: [userIds], references: [id])
} 

model AddressOption {    
  id String @id @default(auto()) @map("_id") @db.ObjectId
  adress String
  zipCode String
  country String
  province String
  city String
}

model Vendor {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  phone String?
  profile Json?
  address Json?
  Id_BankInfo Json?
  allInfoProvided Boolean?
  superTokensUserId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  paymentOptions PaymentOption[]
  store Store?
}

model Store {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  description String?
  logo String?
  banner String?
  url String?
  posRatings Int @default(0)
  neuRatings Int @default(0)
  negRatings Int @default(0)
  ratingsCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vendorId String @db.ObjectId @unique
  vendor Vendor @relation(fields: [vendorId], references: [id])    

  orderIds String[] @db.ObjectId
  orders Order[] @relation(fields: [orderIds], references: [id])
  
  returnRequestIds String[] @db.ObjectId
  returnRequests ReturnRequest[] @relation(fields: [returnRequestIds], references: [id])

  coupons Coupon[]
  products Product[]
  discounts Discount[]
  questions Question[]
  orderedProducts OrderedProduct[]
  ratingAndReviews RatingAndReview[]
}   

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  SKU String?
  name String
  description String
  image String?
  price Int
  quantity Int
  storeName String
  detailedImages String[]
  variants Json?
  combinations Json[]
  attributes Json
  keywords  String[]
  details String[]
  category String?
  categoryTreeData Json[]
  avgRating Float @default(0)
  ratingsSum Int @default(0)
  ratingsCount Int @default(0)
  //Ratings count of each specific rating number
  detailedRatingsCount Json
  questionsCount Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clicks Int @default(0)
  numOfSales Int @default(0)
  storeId String @db.ObjectId
  superTokensUserId String
  store Store @relation(fields: [storeId], references: [id])

  discountId String? @db.ObjectId
  discount Discount? @relation(fields: [discountId], references: [id])

  couponId String? @db.ObjectId
  coupon Coupon? @relation(fields: [couponId], references: [id])

  favouritedByIds String[] @db.ObjectId
  favouritedBy User[] @relation(fields: [favouritedByIds], references: [id])

  // orderIds String[] @db.ObjectId
  // orders Order[] @relation(fields: [orderIds], references: [id])

  ratingAndReviews RatingAndReview[]
  questions Question[]
  cartItems CartItem[]
}

model ProductClick {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  superTokensUserId String
  productId String
  storeId String
}

model Keyword {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model Attribute {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  options String[]
  select Boolean @default(false)
  multiSelect Boolean @default(false)

  categoryIds String[] @db.ObjectId
  categories Category[] @relation(fields: [categoryIds], references: [id])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  children Category[] @relation("SubCategories")

  parent Category? @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @db.ObjectId

  attributeIds String[] @db.ObjectId
  attributes Attribute[] @relation(fields: [attributeIds], references: [id])
}

model Sales {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
}

model Order { 
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  createdAt DateTime @default(now())
  totalAmmount Int
  totalQuantity Int
  shippingAddress Json?
  billingAddress Json?
  emailTo String?

  customerId String @db.ObjectId
  customer User @relation(fields: [customerId], references: [id])

  packages Package[]
  cancellationRequests CancellationRequest[]
  returnRequests ReturnRequest[]
  
  associatedStoreIds String[] @db.ObjectId
  associatedStores Store[] @relation(fields: [associatedStoreIds], references: [id])

  transaction Transaction?
} 

model Package {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  ammount Int
  storeId String
  status String
  superTokensUserId String?
  createdAt DateTime @default(now())
  delieveredAt DateTime? @updatedAt

  orderedProducts OrderedProduct[]

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])

  customerId String @db.ObjectId
  customer User @relation(fields: [customerId], references: [id])
}

model OrderedProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  status String
  cancellationReason String?
  returnReason String?
  quantity Int 
  priceAtOrderTime Int
  superTokensUserId String?
  selectedCombination Json?
  hasBeenReviewed Boolean @default(false)
  product Json?

  packageId String @db.ObjectId
  package Package @relation(fields: [packageId], references: [id])

  cancellationRequestId String? @db.ObjectId
  cancellationRequest CancellationRequest? @relation(fields: [cancellationRequestId], references: [id])

  returnRequestId String? @db.ObjectId
  returnRequest ReturnRequest? @relation(fields: [returnRequestId], references: [id])

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  ratingAndReview RatingAndReview[]
}

model CancellationRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  cancelledOn DateTime?
  status String

  orderedProducts OrderedProduct[]

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])

  requesterId String @db.ObjectId
  requester User @relation(fields: [requesterId], references: [id])
}

model ReturnRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  orderFeedback String?
  proofImages String[]
  approved Boolean?
  rejected Boolean?
  returnedOn DateTime?
  status String

  orderedProducts OrderedProduct[]

  storeIds String[] @db.ObjectId
  stores Store[] @relation(fields: [storeIds], references: [id])

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id])

  requesterId String @db.ObjectId
  requester User @relation(fields: [requesterId], references: [id])
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  selectedCombination Json?

  userId String @db.ObjectId
  cart User @relation(fields: [userId], references: [id]) 

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete : Cascade)
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  createdAt DateTime @default(now())
  ammount Int
  type String?
  method String?
  status String?

  orderId String @db.ObjectId @unique
  order Order @relation(fields: [orderId], references: [id])

  vendorId String @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model PaymentOption {
  id String @id @default(auto()) @map("_id") @db.ObjectId  
  name String?
  isDefault Boolean?
  cardHolderName String?
  cardNumber String?
  CVV String?
  expirationDate DateTime?
  bankAccountNumber String?
  easyPaisaAccountNumber String?
  paypalEmail String?

  userId String @db.ObjectId
  user User @relation("userPaymentOptions", fields: [userId], references: [id])

  vendorId String @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model Discount {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  isPercentOff Boolean?
  percentOff Int?
  ammountOff Int?
  priceThreshold Int?
  startingDate DateTime
  endingDate DateTime
  createdAt DateTime @default(now())
  isApplicableForStore Boolean? 

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  products Product[]
}

model Coupon {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  code String
  isPercentOff Boolean?
  percentOff Int?
  ammountOff Int?
  usageLimit Int?
  priceThreshold Int?
  startingDate DateTime
  endingDate DateTime
  createdAt DateTime @default(now())
  isApplicableForStore Boolean?

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  product Product[]
}

model RatingAndReview {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  rating Int?
  review String?
  sellerReview String?
  sellerResponse Int @default(0)
  reviewImages String[]
  answer String?
  answeredAt DateTime?
  userInformation Json

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id])

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])

  orderedProductId String @db.ObjectId
  orderedProduct OrderedProduct @relation(fields: [orderedProductId], references: [id])
}

model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  query String
  answer String?
  answeredAt DateTime?
  userInformation Json
  storeInformation Json

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  storeId String @db.ObjectId
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
} 

